node shift(time:int) returns (s:int)
let
	automaton
		state Start do
			s = 0;
		unless time < 6 or time >= 18 then Night
			 | time >= 6 or time < 18 then Day

		state Day do
			s = 1;
		unless time < 6 or time >= 18 then Night

		state Night do
			s = 2;
		unless time >= 6 or time < 18 then Day
	end
tel

node category(crop:int) returns (c:int)
let
	automaton
		state Start do
			c = 0;
		unless crop = 1 then Warm
			 | crop = 2 then Moderate
			 | crop = 3 then Cool

		state Warm do
			c = 1;
		unless crop = 2 then Moderate
			 | crop = 3 then Cool

		state Moderate do
			c = 2;
		unless crop = 1 then Warm
			 | crop = 3 then Cool

		state Cool do
			c = 3;
		unless crop = 1 then Warm
			 | crop = 2 then Moderate
	end
tel

node heating(c:bool) returns (status:bool)
let
	automaton
		state Off do
			status = false;
		unless not c then On

		state On do
			status = true;
		unless c then Off
	end
tel

node cooling(c:bool) returns (status:bool)
let
	automaton
		state Off do
			status = false;
		unless not c then On

		state On do
			status = true;
		unless c then Off
	end
tel

node greenhouse(crop,t_in,time:int) returns (heating_on,cooling_on:bool; c,s:int)
contract
	var both_on,t1,t2,t3,t4:bool;
	let
		both_on = not (heating_on & cooling_on);
		
		t1 = (
			(c = 1 & s = 1 & t_in < 27) or
			(c = 1 & s = 2 & t_in < 24) or
			(c = 2 & s = 1 & t_in < 24) or
			(c = 2 & s = 2 & t_in < 16) or
			(c = 3 & s = 1 & t_in < 21) or
			(c = 3 & s = 2 & t_in < 10)
		);
		t2 = (
			(c = 1 & s = 1 & t_in > 38) or
			(c = 1 & s = 2 & t_in > 27) or
			(c = 2 & s = 1 & t_in > 27) or
			(c = 2 & s = 2 & t_in > 18) or
			(c = 3 & s = 1 & t_in > 27) or
			(c = 3 & s = 2 & t_in > 16)
		);

		t3 = (not t1 or (heating_on & not cooling_on));
		t4 = (not t2 or (cooling_on & not heating_on));

	tel
	enforce both_on & t3 & t4
	with(c1,c2:bool)
let
	heating_on = inlined heating(c1);
	cooling_on = inlined cooling(c2);
	c = inlined category(crop);
	s = inlined shift(time);
tel