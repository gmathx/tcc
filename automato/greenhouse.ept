node shift(time:int) returns (d,m,a,n:bool)
let
	automaton
		state Dawn do
			d = true; m = false; a = false; n = false;
		unless time >= 8 & time < 12 then Morning
			 | time >= 12 & time < 17 then Afternoon
			 | time >= 17 then Night

		state Morning do
			d = false; m = true; a = false; n = false;
		unless time < 8 then Dawn
			 | time >= 12 & time < 17 then Afternoon
			 | time >= 17 then Night
		
		state Afternoon do
			d = false; m = false; a = true; n = false;
		unless time < 8 then Dawn
			 | time >= 8 & time < 12 then Morning
			 | time >= 17 then Night

		
		state Night do
			d = false; m = false; a = false; n = true;
		unless time < 8 then Dawn
			 | time >= 8 & time < 12 then Morning
			 | time >= 12 & time < 17 then Afternoon
	end
tel

node heating(turn_on,c:bool) returns (status:bool)
let
	automaton
		state Off do
			status = false;
		unless turn_on & c then On

		state On do
			status = true;
		unless not turn_on & c then Off
	end
tel

node cooling(turn_on,c:bool) returns (status:bool)
let
	automaton
		state Off do
			status = false;
		unless turn_on & c then On

		state On do
			status = true;
		unless not turn_on & c then Off
	end
tel

node greenhouse(t_in,time:int; mc_heating, mc_cooling: bool) returns (heating_on,cooling_on:bool)
contract
	var both_on,too_hot,too_cold:bool;
	let
		too_hot = (heating_on & t_in > 30);
		too_cold = (cooling_on & t_in < 10);
		both_on = (heating_on & cooling_on);
	tel
	enforce (not too_hot & not too_cold & not both_on)
	with(c1,c2:bool)
var d,m,a,n,t1,t2:bool;
let
	(d,m,a,n) = shift(time);
	t1 = (mc_heating or ((d & t_in < 20) or (m & t_in < 15) or (a & t_in < 10) or (n & t_in < 25)));
	t2 = (mc_cooling or ((d & t_in > 25) or (m & t_in > 20) or (a & t_in > 15) or (n & t_in > 30)));
	heating_on = inlined heating(t1,c1);
	cooling_on = inlined cooling(t2,c2);
tel