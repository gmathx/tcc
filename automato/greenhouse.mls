type st_4 = St_4_On|St_4_Off
type st_3 = St_3_On|St_3_Off
type st_2 = St_2_On|St_2_Off
type st_1 = St_1_On|St_1_Off
type st = St_Night|St_Morning|St_Dawn|St_Afternoon
node shift(time : int) returns (d : bool; m : bool; a : bool; n : bool)
var v_87 : bool; v_86 : bool; v_85 : bool; v_84 : bool; v_83 : bool;
    v_82 : bool; v_81 : bool; v_80 : bool; v_79 : bool; v_78 : bool;
    v_77 : bool; v_76 : bool; v_75 : bool; v_74 : bool;
    ns_St_Night_2_0 : bool; ns_St_Night_2_1 : bool;
    ns_St_Afternoon_2_0 : bool; ns_St_Afternoon_2_1 : bool;
    ns_St_Morning_2_0 : bool; ns_St_Morning_2_1 : bool;
    ns_St_Dawn_2_0 : bool; ns_St_Dawn_2_1 : bool; ck_1_2_0 : bool;
    ck_1_2_1 : bool; nr_St_Night : bool; ns_St_Night_2 : bool;
    ns_St_Night_1 : bool; n_St_Night : bool; a_St_Night : bool;
    m_St_Night : bool; d_St_Night : bool; nr_St_Afternoon : bool;
    ns_St_Afternoon_2 : bool; ns_St_Afternoon_1 : bool;
    n_St_Afternoon : bool; a_St_Afternoon : bool; m_St_Afternoon : bool;
    d_St_Afternoon : bool; nr_St_Morning : bool; ns_St_Morning_2 : bool;
    ns_St_Morning_1 : bool; n_St_Morning : bool; a_St_Morning : bool;
    m_St_Morning : bool; d_St_Morning : bool; nr_St_Dawn : bool;
    ns_St_Dawn_2 : bool; ns_St_Dawn_1 : bool; n_St_Dawn : bool;
    a_St_Dawn : bool; m_St_Dawn : bool; d_St_Dawn : bool; ck_1_2 : bool;
    ck_1_1 : bool; v_38_2_0 : bool; v_38_2_1 : bool; v_36_2_0 : bool;
    v_36_2_1 : bool; v_39 : bool; v_38_2 : bool; v_38_1 : bool; v_37 : bool;
    v_36_2 : bool; v_36_1 : bool; v_35 : bool; v_34 : bool; v_33 : bool;
    v_32 : bool; v_31 : bool; v_30 : bool; v_29 : bool; v_27_2_0 : bool;
    v_27_2_1 : bool; v_25_2_0 : bool; v_25_2_1 : bool; v_28 : bool;
    v_27_2 : bool; v_27_1 : bool; v_26 : bool; v_25_2 : bool; v_25_1 : bool;
    v_24 : bool; v_23 : bool; v_22 : bool; v_21 : bool; v_20 : bool;
    v_18_2_0 : bool; v_18_2_1 : bool; v_16_2_0 : bool; v_16_2_1 : bool;
    v_19 : bool; v_18_2 : bool; v_18_1 : bool; v_17 : bool; v_16_2 : bool;
    v_16_1 : bool; v_15 : bool; v_14 : bool; v_13 : bool; v_12 : bool;
    v_11 : bool; v_9_2_0 : bool; v_9_2_1 : bool; v_7_2_0 : bool;
    v_7_2_1 : bool; v_10 : bool; v_9_2 : bool; v_9_1 : bool; v_8 : bool;
    v_7_2 : bool; v_7_1 : bool; v_6 : bool; v_5 : bool; v_4 : bool;
    v_3 : bool; v_2 : bool; v_1 : bool; v : bool; v_95 : bool; v_94 : bool;
    v_93 : bool; v_92 : bool; v_91 : bool; v_90 : bool; v_89 : bool;
    v_88 : bool; s_St_Night_2_0 : bool; s_St_Night_2_1 : bool;
    s_St_Afternoon_2_0 : bool; s_St_Afternoon_2_1 : bool;
    s_St_Morning_2_0 : bool; s_St_Morning_2_1 : bool; s_St_Dawn_2_0 : bool;
    s_St_Dawn_2_1 : bool; ck_2_0 : bool; ck_2_1 : bool; r_St_Night : bool;
    s_St_Night_2 : bool; s_St_Night_1 : bool; r_St_Afternoon : bool;
    s_St_Afternoon_2 : bool; s_St_Afternoon_1 : bool; r_St_Morning : bool;
    s_St_Morning_2 : bool; s_St_Morning_1 : bool; r_St_Dawn : bool;
    s_St_Dawn_2 : bool; s_St_Dawn_1 : bool; ck_2 : bool; ck_1_3 : bool;
    s_2_0 : bool; s_2_1 : bool; ns_2_0 : bool; ns_2_1 : bool; s_2 : bool;
    s_1 : bool; ns_2 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_1_1 = s_1;
  ck_1_2 = s_2;
  d_St_Dawn = true;
  m_St_Dawn = false;
  a_St_Dawn = false;
  n_St_Dawn = false;
  nr_St_Dawn = false;
  ns_St_Dawn_1 = true;
  ns_St_Dawn_2 = false;
  d_St_Morning = false;
  m_St_Morning = true;
  a_St_Morning = false;
  n_St_Morning = false;
  nr_St_Morning = false;
  ns_St_Morning_1 = false;
  ns_St_Morning_2 = true;
  d_St_Afternoon = false;
  m_St_Afternoon = false;
  a_St_Afternoon = true;
  n_St_Afternoon = false;
  nr_St_Afternoon = false;
  ns_St_Afternoon_1 = true;
  ns_St_Afternoon_2 = true;
  d_St_Night = false;
  m_St_Night = false;
  a_St_Night = false;
  n_St_Night = true;
  nr_St_Night = false;
  ns_St_Night_1 = false;
  ns_St_Night_2 = false;
  v_74 = merge ck_1_2_1 (true -> d_St_Afternoon)(false -> d_St_Dawn);
  v_75 = merge ck_1_2_0 (true -> d_St_Morning)(false -> d_St_Night);
  d = merge ck_1_1 (true -> v_74)(false -> v_75);
  v_76 = merge ck_1_2_1 (true -> m_St_Afternoon)(false -> m_St_Dawn);
  v_77 = merge ck_1_2_0 (true -> m_St_Morning)(false -> m_St_Night);
  m = merge ck_1_1 (true -> v_76)(false -> v_77);
  v_78 = merge ck_1_2_1 (true -> a_St_Afternoon)(false -> a_St_Dawn);
  v_79 = merge ck_1_2_0 (true -> a_St_Morning)(false -> a_St_Night);
  a = merge ck_1_1 (true -> v_78)(false -> v_79);
  v_80 = merge ck_1_2_1 (true -> n_St_Afternoon)(false -> n_St_Dawn);
  v_81 = merge ck_1_2_0 (true -> n_St_Morning)(false -> n_St_Night);
  n = merge ck_1_1 (true -> v_80)(false -> v_81);
  v_82 = merge ck_1_2_1 (true -> ns_St_Afternoon_1)(false -> ns_St_Dawn_1);
  v_83 = merge ck_1_2_1 (true -> ns_St_Afternoon_2)(false -> ns_St_Dawn_2);
  v_84 = merge ck_1_2_0 (true -> ns_St_Morning_1)(false -> ns_St_Night_1);
  v_85 = merge ck_1_2_0 (true -> ns_St_Morning_2)(false -> ns_St_Night_2);
  ns_1 = merge ck_1_1 (true -> v_82)(false -> v_84);
  ns_2 = merge ck_1_1 (true -> v_83)(false -> v_85);
  v_86 = merge ck_1_2_1 (true -> nr_St_Afternoon)(false -> nr_St_Dawn);
  v_87 = merge ck_1_2_0 (true -> nr_St_Morning)(false -> nr_St_Night);
  nr = merge ck_1_1 (true -> v_86)(false -> v_87);
  ck_1_2_1 = (ck_1_2 when true(ck_1_1));
  ck_1_2_0 = (ck_1_2 when false(ck_1_1));
  ns_St_Dawn_2_1 = (ns_St_Dawn_2 when true(ns_St_Dawn_1));
  ns_St_Dawn_2_0 = (ns_St_Dawn_2 when false(ns_St_Dawn_1));
  ns_St_Morning_2_1 = (ns_St_Morning_2 when true(ns_St_Morning_1));
  ns_St_Morning_2_0 = (ns_St_Morning_2 when false(ns_St_Morning_1));
  ns_St_Afternoon_2_1 = (ns_St_Afternoon_2 when true(ns_St_Afternoon_1));
  ns_St_Afternoon_2_0 = (ns_St_Afternoon_2 when false(ns_St_Afternoon_1));
  ns_St_Night_2_1 = (ns_St_Night_2 when true(ns_St_Night_1));
  ns_St_Night_2_0 = (ns_St_Night_2 when false(ns_St_Night_1));
  v_88 = true fby ns_1;
  v_89 = false fby ns_2;
  ck_1_3 = v_88;
  ck_2 = v_89;
  r_St_Dawn = if v_31 then true else v_39;
  s_St_Dawn_1 = if v_31 then false else v_38_1;
  s_St_Dawn_2 = if v_31 then true else v_38_2;
  v_39 = if v_34 then true else v_37;
  v_38_1 = if v_34 then true else v_36_1;
  v_38_2 = if v_34 then true else v_36_2;
  v_37 = if v_35 then true else ((pnr when true(ck_1_3)) when false(ck_2_1));
  v_36_1 = if v_35 then false else true;
  v_36_2 = if v_35 then false else false;
  v_35 = (((time when true(ck_1_3)) when false(ck_2_1)) >= 17);
  v_34 = (v_32 & v_33);
  v_33 = (((time when true(ck_1_3)) when false(ck_2_1)) < 17);
  v_32 = (((time when true(ck_1_3)) when false(ck_2_1)) >= 12);
  v_31 = (v_29 & v_30);
  v_30 = (((time when true(ck_1_3)) when false(ck_2_1)) < 12);
  v_29 = (((time when true(ck_1_3)) when false(ck_2_1)) >= 8);
  v_36_2_1 = (v_36_2 when true(v_36_1));
  v_36_2_0 = (v_36_2 when false(v_36_1));
  v_38_2_1 = (v_38_2 when true(v_38_1));
  v_38_2_0 = (v_38_2 when false(v_38_1));
  r_St_Morning = if v_20 then true else v_28;
  s_St_Morning_1 = if v_20 then true else v_27_1;
  s_St_Morning_2 = if v_20 then false else v_27_2;
  v_28 = if v_23 then true else v_26;
  v_27_1 = if v_23 then true else v_25_1;
  v_27_2 = if v_23 then true else v_25_2;
  v_26 = if v_24 then true else ((pnr when false(ck_1_3)) when true(ck_2_0));
  v_25_1 = if v_24 then false else false;
  v_25_2 = if v_24 then false else true;
  v_24 = (((time when false(ck_1_3)) when true(ck_2_0)) >= 17);
  v_23 = (v_21 & v_22);
  v_22 = (((time when false(ck_1_3)) when true(ck_2_0)) < 17);
  v_21 = (((time when false(ck_1_3)) when true(ck_2_0)) >= 12);
  v_20 = (((time when false(ck_1_3)) when true(ck_2_0)) < 8);
  v_25_2_1 = (v_25_2 when true(v_25_1));
  v_25_2_0 = (v_25_2 when false(v_25_1));
  v_27_2_1 = (v_27_2 when true(v_27_1));
  v_27_2_0 = (v_27_2 when false(v_27_1));
  r_St_Afternoon = if v_11 then true else v_19;
  s_St_Afternoon_1 = if v_11 then true else v_18_1;
  s_St_Afternoon_2 = if v_11 then false else v_18_2;
  v_19 = if v_14 then true else v_17;
  v_18_1 = if v_14 then false else v_16_1;
  v_18_2 = if v_14 then true else v_16_2;
  v_17 = if v_15 then true else ((pnr when true(ck_1_3)) when true(ck_2_1));
  v_16_1 = if v_15 then false else true;
  v_16_2 = if v_15 then false else true;
  v_15 = (((time when true(ck_1_3)) when true(ck_2_1)) >= 17);
  v_14 = (v_12 & v_13);
  v_13 = (((time when true(ck_1_3)) when true(ck_2_1)) < 12);
  v_12 = (((time when true(ck_1_3)) when true(ck_2_1)) >= 8);
  v_11 = (((time when true(ck_1_3)) when true(ck_2_1)) < 8);
  v_16_2_1 = (v_16_2 when true(v_16_1));
  v_16_2_0 = (v_16_2 when false(v_16_1));
  v_18_2_1 = (v_18_2 when true(v_18_1));
  v_18_2_0 = (v_18_2 when false(v_18_1));
  r_St_Night = if v then true else v_10;
  s_St_Night_1 = if v then true else v_9_1;
  s_St_Night_2 = if v then false else v_9_2;
  v_10 = if v_3 then true else v_8;
  v_9_1 = if v_3 then false else v_7_1;
  v_9_2 = if v_3 then true else v_7_2;
  v_8 = if v_6 then true else ((pnr when false(ck_1_3)) when false(ck_2_0));
  v_7_1 = if v_6 then true else false;
  v_7_2 = if v_6 then true else false;
  v_6 = (v_4 & v_5);
  v_5 = (((time when false(ck_1_3)) when false(ck_2_0)) < 17);
  v_4 = (((time when false(ck_1_3)) when false(ck_2_0)) >= 12);
  v_3 = (v_1 & v_2);
  v_2 = (((time when false(ck_1_3)) when false(ck_2_0)) < 12);
  v_1 = (((time when false(ck_1_3)) when false(ck_2_0)) >= 8);
  v = (((time when false(ck_1_3)) when false(ck_2_0)) < 8);
  v_7_2_1 = (v_7_2 when true(v_7_1));
  v_7_2_0 = (v_7_2 when false(v_7_1));
  v_9_2_1 = (v_9_2 when true(v_9_1));
  v_9_2_0 = (v_9_2 when false(v_9_1));
  v_90 = merge ck_2_1 (true -> s_St_Afternoon_1)(false -> s_St_Dawn_1);
  v_91 = merge ck_2_1 (true -> s_St_Afternoon_2)(false -> s_St_Dawn_2);
  v_92 = merge ck_2_0 (true -> s_St_Morning_1)(false -> s_St_Night_1);
  v_93 = merge ck_2_0 (true -> s_St_Morning_2)(false -> s_St_Night_2);
  s_1 = merge ck_1_3 (true -> v_90)(false -> v_92);
  s_2 = merge ck_1_3 (true -> v_91)(false -> v_93);
  v_94 = merge ck_2_1 (true -> r_St_Afternoon)(false -> r_St_Dawn);
  v_95 = merge ck_2_0 (true -> r_St_Morning)(false -> r_St_Night);
  r = merge ck_1_3 (true -> v_94)(false -> v_95);
  ck_2_1 = (ck_2 when true(ck_1_3));
  ck_2_0 = (ck_2 when false(ck_1_3));
  s_St_Dawn_2_1 = (s_St_Dawn_2 when true(s_St_Dawn_1));
  s_St_Dawn_2_0 = (s_St_Dawn_2 when false(s_St_Dawn_1));
  s_St_Morning_2_1 = (s_St_Morning_2 when true(s_St_Morning_1));
  s_St_Morning_2_0 = (s_St_Morning_2 when false(s_St_Morning_1));
  s_St_Afternoon_2_1 = (s_St_Afternoon_2 when true(s_St_Afternoon_1));
  s_St_Afternoon_2_0 = (s_St_Afternoon_2 when false(s_St_Afternoon_1));
  s_St_Night_2_1 = (s_St_Night_2 when true(s_St_Night_1));
  s_St_Night_2_0 = (s_St_Night_2 when false(s_St_Night_1));
  ns_2_1 = (ns_2 when true(ns_1));
  ns_2_0 = (ns_2 when false(ns_1));
  s_2_1 = (s_2 when true(s_1));
  s_2_0 = (s_2 when false(s_1))
tel

node heating(c : bool) returns (status : bool)
var nr_St_1_On : bool; ns_St_1_On_1 : bool; status_St_1_On : bool;
    nr_St_1_Off : bool; ns_St_1_Off_1 : bool; status_St_1_Off : bool;
    ck_2_1 : bool; v : bool; r_St_1_On : bool; s_St_1_On_1 : bool;
    r_St_1_Off : bool; s_St_1_Off_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_2_1 = s_1;
  status_St_1_Off = false;
  nr_St_1_Off = false;
  ns_St_1_Off_1 = true;
  status_St_1_On = true;
  nr_St_1_On = false;
  ns_St_1_On_1 = false;
  status = merge ck_2_1 (true -> status_St_1_Off)(false -> status_St_1_On);
  ns_1 = merge ck_2_1 (true -> ns_St_1_Off_1)(false -> ns_St_1_On_1);
  nr = merge ck_2_1 (true -> nr_St_1_Off)(false -> nr_St_1_On);
  ck_1 = true fby ns_1;
  r_St_1_Off = if (c when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_1_Off_1 = if (c when true(ck_1)) then false else true;
  r_St_1_On = if v then true else (pnr when false(ck_1));
  s_St_1_On_1 = if v then true else false;
  v = not((c when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_1_Off_1)(false -> s_St_1_On_1);
  r = merge ck_1 (true -> r_St_1_Off)(false -> r_St_1_On)
tel

node cooling(c : bool) returns (status : bool)
var nr_St_2_On : bool; ns_St_2_On_1 : bool; status_St_2_On : bool;
    nr_St_2_Off : bool; ns_St_2_Off_1 : bool; status_St_2_Off : bool;
    ck_3_1 : bool; v : bool; r_St_2_On : bool; s_St_2_On_1 : bool;
    r_St_2_Off : bool; s_St_2_Off_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_3_1 = s_1;
  status_St_2_Off = false;
  nr_St_2_Off = false;
  ns_St_2_Off_1 = true;
  status_St_2_On = true;
  nr_St_2_On = false;
  ns_St_2_On_1 = false;
  status = merge ck_3_1 (true -> status_St_2_Off)(false -> status_St_2_On);
  ns_1 = merge ck_3_1 (true -> ns_St_2_Off_1)(false -> ns_St_2_On_1);
  nr = merge ck_3_1 (true -> nr_St_2_Off)(false -> nr_St_2_On);
  ck_1 = true fby ns_1;
  r_St_2_Off = if (c when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_2_Off_1 = if (c when true(ck_1)) then false else true;
  r_St_2_On = if v then true else (pnr when false(ck_1));
  s_St_2_On_1 = if v then true else false;
  v = not((c when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_2_Off_1)(false -> s_St_2_On_1);
  r = merge ck_1 (true -> r_St_2_Off)(false -> r_St_2_On)
tel

node greenhouse(t_in : int; time : int)
returns (heating_on : bool; cooling_on : bool)
contract
  var t2 : bool; t1 : bool; n : bool; a : bool; m : bool; d : bool;
      both_on : bool; too_cold : bool; too_hot : bool; v : bool; v_40 : bool;
      v_41 : bool; v_42 : bool; v_43 : bool; v_44 : bool; v_45 : bool;
      v_46 : bool; v_47 : bool; v_48 : bool; v_49 : bool; v_50 : bool;
      v_51 : bool; v_52 : bool; v_53 : bool; v_54 : bool; v_55 : bool;
      v_56 : bool; v_57 : bool; v_58 : bool; v_59 : bool; v_60 : bool;
      v_61 : bool; v_62 : bool; v_63 : bool; v_64 : bool; v_65 : bool;
      v_66 : bool; v_67 : bool; v_68 : bool; v_69 : bool; v_70 : bool;
      v_71 : bool;
  let
    v = (t_in > 25);
    v_40 = (d & v);
    v_41 = (t_in > 20);
    v_42 = (m & v_41);
    v_43 = (v_40 or v_42);
    v_44 = (t_in > 15);
    v_45 = (a & v_44);
    v_46 = (v_43 or v_45);
    v_47 = (t_in > 30);
    v_48 = (n & v_47);
    t2 = (v_46 or v_48);
    v_49 = (t_in < 20);
    v_50 = (d & v_49);
    v_51 = (t_in < 15);
    v_52 = (m & v_51);
    v_53 = (v_50 or v_52);
    v_54 = (t_in < 10);
    v_55 = (a & v_54);
    v_56 = (v_53 or v_55);
    v_57 = (t_in < 25);
    v_58 = (n & v_57);
    t1 = (v_56 or v_58);
    (d, m, a, n) = shift(time);
    both_on = (heating_on & cooling_on);
    v_59 = (t_in < 5);
    too_cold = (cooling_on & v_59);
    v_60 = (t_in > 35);
    too_hot = (heating_on & v_60);
    v_61 = not(too_hot);
    v_62 = not(too_cold);
    v_63 = (v_61 & v_62);
    v_64 = not(both_on);
    v_65 = (v_63 & v_64);
    v_66 = not(t1);
    v_67 = (v_66 or heating_on);
    v_68 = (v_65 & v_67);
    v_69 = not(t2);
    v_70 = (v_69 or cooling_on);
    v_71 = (v_68 & v_70)
  tel
  assume true@ enforce v_71] with (c2 : bool; c1 : bool)
                 var nr_St_3_On : bool; ns_St_3_On_1 : bool;
                     status_1_St_3_On : bool; nr_St_3_Off : bool;
                     ns_St_3_Off_1 : bool; status_1_St_3_Off : bool;
                     ck_6_1 : bool; v_73 : bool; r_St_3_On : bool;
                     s_St_3_On_1 : bool; r_St_3_Off : bool;
                     s_St_3_Off_1 : bool; ck_5_1 : bool; nr_1_St_4_On : bool;
                     ns_1_St_4_On_1 : bool; status_St_4_On : bool;
                     nr_1_St_4_Off : bool; ns_1_St_4_Off_1 : bool;
                     status_St_4_Off : bool; ck_4_1 : bool; v_72 : bool;
                     r_1_St_4_On : bool; s_1_St_4_On_1 : bool;
                     r_1_St_4_Off : bool; s_1_St_4_Off_1 : bool; ck_1 : bool;
                     s_1_1 : bool; ns_1_1 : bool; r_1 : bool; nr_1 : bool;
                     pnr_1 : bool; s_1_2 : bool; ns_1_2 : bool; r : bool;
                     nr : bool; pnr : bool; c_1 : bool; status_1 : bool;
                     c : bool; status : bool;
  let
    c_1 = c2;
    pnr = false fby nr;
    ck_6_1 = s_1_2;
    status_1_St_3_Off = false;
    nr_St_3_Off = false;
    ns_St_3_Off_1 = true;
    status_1_St_3_On = true;
    nr_St_3_On = false;
    ns_St_3_On_1 = false;
    status_1 =
      merge ck_6_1 (true -> status_1_St_3_Off)(false -> status_1_St_3_On);
    ns_1_2 = merge ck_6_1 (true -> ns_St_3_Off_1)(false -> ns_St_3_On_1);
    nr = merge ck_6_1 (true -> nr_St_3_Off)(false -> nr_St_3_On);
    ck_5_1 = true fby ns_1_2;
    r_St_3_Off =
      if (c_1 when true(ck_5_1)) then true else (pnr when true(ck_5_1));
    s_St_3_Off_1 = if (c_1 when true(ck_5_1)) then false else true;
    r_St_3_On = if v_73 then true else (pnr when false(ck_5_1));
    s_St_3_On_1 = if v_73 then true else false;
    v_73 = not((c_1 when false(ck_5_1)));
    s_1_2 = merge ck_5_1 (true -> s_St_3_Off_1)(false -> s_St_3_On_1);
    r = merge ck_5_1 (true -> r_St_3_Off)(false -> r_St_3_On);
    c = c1;
    pnr_1 = false fby nr_1;
    ck_4_1 = s_1_1;
    status_St_4_Off = false;
    nr_1_St_4_Off = false;
    ns_1_St_4_Off_1 = true;
    status_St_4_On = true;
    nr_1_St_4_On = false;
    ns_1_St_4_On_1 = false;
    status = merge ck_4_1 (true -> status_St_4_Off)(false -> status_St_4_On);
    ns_1_1 = merge ck_4_1 (true -> ns_1_St_4_Off_1)(false -> ns_1_St_4_On_1);
    nr_1 = merge ck_4_1 (true -> nr_1_St_4_Off)(false -> nr_1_St_4_On);
    ck_1 = true fby ns_1_1;
    r_1_St_4_Off =
      if (c when true(ck_1)) then true else (pnr_1 when true(ck_1));
    s_1_St_4_Off_1 = if (c when true(ck_1)) then false else true;
    r_1_St_4_On = if v_72 then true else (pnr_1 when false(ck_1));
    s_1_St_4_On_1 = if v_72 then true else false;
    v_72 = not((c when false(ck_1)));
    s_1_1 = merge ck_1 (true -> s_1_St_4_Off_1)(false -> s_1_St_4_On_1);
    r_1 = merge ck_1 (true -> r_1_St_4_Off)(false -> r_1_St_4_On);
    heating_on = status;
    cooling_on = status_1
  tel

