node shift(time:int) returns (s:int)
let
	automaton
		state Start do
			s = 0;
		unless time < 6 or time >= 18 then Night
			 | time >= 6 & time < 18 then Day

		state Day do
			s = 1;
		unless time < 6 or time >= 18 then Night

		state Night do
			s = 2;
		unless time >= 6 & time < 18 then Day
	end
tel

node category(crop:int) returns (cat:int)
let
	automaton
		state Start do
			cat = 0;
		unless crop = 1 then Warm
			 | crop = 2 then Moderate
			 | crop = 3 then Cool

		state Warm do
			cat = 1;
		unless crop = 2 then Moderate
			 | crop = 3 then Cool

		state Moderate do
			cat = 2;
		unless crop = 1 then Warm
			 | crop = 3 then Cool

		state Cool do
			cat = 3;
		unless crop = 1 then Warm
			 | crop = 2 then Moderate
	end
tel

node heating(c:bool) returns (status:bool)
let
	automaton
		state Off do
			status = false;
		unless not c then On

		state On do
			status = true;
		unless c then Off
	end
tel

node cooling(c:bool) returns (status:bool)
let
	automaton
		state Off do
			status = false;
		unless not c then On

		state On do
			status = true;
		unless c then Off
	end
tel

node checkT(cat,s,t_in:int) returns (st:int)
let
	automaton
		state Na do
			st = 0;
		unless 	(cat = 1 & s = 1 & t_in < 27) or (cat = 1 & s = 2 & t_in < 24) or
				(cat = 2 & s = 1 & t_in < 24) or (cat = 2 & s = 2 & t_in < 16) or
				(cat = 3 & s = 1 & t_in < 21) or (cat = 3 & s = 2 & t_in < 10)
				then Heat
			|	(cat = 1 & s = 1 & t_in > 38) or (cat = 1 & s = 2 & t_in > 27) or
				(cat = 2 & s = 1 & t_in > 27) or (cat = 2 & s = 2 & t_in > 18) or
				(cat = 3 & s = 1 & t_in > 27) or (cat = 3 & s = 2 & t_in > 16)
				then Cool

		state Heat do
			st = 1;
		unless 	(cat = 1 & s = 1 & t_in > 38) or (cat = 1 & s = 2 & t_in > 27) or
				(cat = 2 & s = 1 & t_in > 27) or (cat = 2 & s = 2 & t_in > 18) or
				(cat = 3 & s = 1 & t_in > 27) or (cat = 3 & s = 2 & t_in > 16)
				then Cool
			|	(cat = 1 & s = 1 & t_in >= 27 & t_in <= 38) or (cat = 1 & s = 2 & t_in >= 24 & t_in <= 27) or
				(cat = 2 & s = 1 & t_in >= 24 & t_in <= 27) or (cat = 2 & s = 2 & t_in >= 16 & t_in <= 18) or
				(cat = 3 & s = 1 & t_in >= 21 & t_in <= 27) or (cat = 3 & s = 2 & t_in >= 10 & t_in <= 16)
				then Na

		state Cool do
			st = 2;
		unless 	(cat = 1 & s = 1 & t_in < 27) or (cat = 1 & s = 2 & t_in < 24) or
				(cat = 2 & s = 1 & t_in < 24) or (cat = 2 & s = 2 & t_in < 16) or
				(cat = 3 & s = 1 & t_in < 21) or (cat = 3 & s = 2 & t_in < 10)
				then Heat
			|	(cat = 1 & s = 1 & t_in >= 27 & t_in <= 38) or (cat = 1 & s = 2 & t_in >= 24 & t_in <= 27) or
				(cat = 2 & s = 1 & t_in >= 24 & t_in <= 27) or (cat = 2 & s = 2 & t_in >= 16 & t_in <= 18) or
				(cat = 3 & s = 1 & t_in >= 21 & t_in <= 27) or (cat = 3 & s = 2 & t_in >= 10 & t_in <= 16)
				then Na
	end
tel

node greenhouse(crop,t_in,time:int) returns (heating_on,cooling_on:bool; cat,s,st:int)
contract
	var t1,t2,t3,t4:bool;
	let

		t1 = (st = 1);
		t2 = (st = 2);

		t3 = (not t1 or (heating_on & not cooling_on));
		t4 = (not t2 or (cooling_on & not heating_on));

	tel
	enforce t3 & t4
	with(c1,c2:bool)
let
	heating_on = inlined heating(c1);
	cooling_on = inlined cooling(c2);
	cat = inlined category(crop);
	s = inlined shift(time);
	st = inlined checkT(cat,s,t_in);
tel