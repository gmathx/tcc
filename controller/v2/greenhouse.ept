node shift(time:int) returns (s:int)
let
	automaton
		state Start do
			s = 0;
		unless time < 6 or time >= 18 then Night
			 | time >= 6 & time < 18 then Day

		state Day do
			s = 1;
		unless time < 6 or time >= 18 then Night

		state Night do
			s = 2;
		unless time >= 6 & time < 18 then Day
	end
tel

node heating(c:bool) returns (status:bool)
let
	automaton
		state Off do
			status = false;
		unless not c then On

		state On do
			status = true;
		unless c then Off
	end
tel

node cooling(c:bool) returns (status:bool)
let
	automaton
		state Off do
			status = false;
		unless not c then On

		state On do
			status = true;
		unless c then Off
	end
tel

node checkT(s,t_in:int) returns (st:int)
let
	automaton
		state Na do
			st = 0;
		unless 	(s = 1 & t_in < 24) or (s = 2 & t_in < 16) then Heat
			|	(s = 1 & t_in > 27) or (s = 2 & t_in > 18) then Cool

		state Heat do
			st = 1;
		unless 	(s = 1 & t_in > 27) or (s = 2 & t_in > 18) then Cool
			|	(s = 1 & t_in >= 24 & t_in <= 27) or (s = 2 & t_in >= 16 & t_in <= 18) then Na

		state Cool do
			st = 2;
		unless 	(s = 1 & t_in < 24) or (s = 2 & t_in < 16) then Heat
			|	(s = 1 & t_in >= 24 & t_in <= 27) or (s = 2 & t_in >= 16 & t_in <= 18) then Na
	end
tel

node greenhouse(crop,t_in,time:int) returns (heating_on,cooling_on:bool; s,st:int)
contract
	var both_on,t1,t2,t3,t4:bool;
	let
		both_on = not (heating_on & cooling_on);
		
		t1 = (st = 1);
		t2 = (st = 2);

		t3 = (not t1 or (heating_on & not cooling_on));
		t4 = (not t2 or (cooling_on & not heating_on));

	tel
	enforce both_on & t3 & t4
	with(c1,c2:bool)
let
	heating_on = inlined heating(c1);
	cooling_on = inlined cooling(c2);
	s = inlined shift(time);
	st = inlined checkT(s,t_in);
tel